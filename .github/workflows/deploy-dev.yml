name: Deploy to Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: tar -czf ../app.tar.gz --exclude='.git' --exclude='__pycache__' . && mv ../app.tar.gz .
    - uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        source: app.tar.gz
        target: /tmp/
    - uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        script: |
          set -e
          
          echo "🚀 Starting Docker deployment..."
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "📦 Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "📦 Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Install network debugging tools
          echo "📦 Installing network tools..."
          apt-get update -qq && apt-get install -y -qq net-tools lsof psmisc curl >/dev/null 2>&1 || true
          
          # Determine which compose command to use
          if docker compose version &> /dev/null; then
            echo "Using docker compose (v2)"
            COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            echo "Using docker-compose (v1)"
            COMPOSE_CMD="docker-compose"
          else
            echo "❌ No Docker Compose found!"
            exit 1
          fi
          
          # Setup application directory
          echo "📁 Setting up application..."
          mkdir -p /opt/photogrammetry/data
          mkdir -p /opt/photogrammetry/logs
          cd /opt/photogrammetry
          tar -xzf /tmp/app.tar.gz
          
          # Use dev-specific compose file for port 8080
          cd deployment
          
          # Check for existing services on port 80
          echo "🔍 Checking for services using port 80..."
          if netstat -tuln 2>/dev/null | grep -q ':80 ' || ss -tuln 2>/dev/null | grep -q ':80 '; then
            echo "⚠️ Port 80 is in use. Checking for existing containers..."
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(80|caddy|nginx)" || true
          fi
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          $COMPOSE_CMD down --remove-orphans 2>/dev/null || true
          docker stop resilience-api photogrammetry-caddy 2>/dev/null || true
          docker rm resilience-api photogrammetry-caddy 2>/dev/null || true
          docker container prune -f 2>/dev/null || true
          
          # Clear potentially corrupted volumes
          docker volume rm $(docker volume ls -q | grep caddy) 2>/dev/null || true
          
          # Start deployment
          echo "� Starting production deployment..."
          if $COMPOSE_CMD up -d --build; then
            echo "✅ Deployment started successfully"
            COMPOSE_FILE="docker-compose.yml"
          else
            echo "❌ Deployment failed!"
            $COMPOSE_CMD logs --tail=50 || true
            exit 1
          fi
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 25
          
          # Check container status
          echo "📊 Container status:"
          $COMPOSE_CMD ps
          
          # Wait for health checks
          echo "🔍 Waiting for health checks..."
          for i in {1..15}; do
            APP_STATUS=$($COMPOSE_CMD ps app --format "{{.Status}}" 2>/dev/null || echo "")
            CADDY_STATUS=$($COMPOSE_CMD ps caddy --format "{{.Status}}" 2>/dev/null || echo "")
            
            if echo "$APP_STATUS" | grep -q "healthy" && echo "$CADDY_STATUS" | grep -q "healthy"; then
              echo "✅ Both services are healthy"
              break
            fi
            
            if [ $i -eq 15 ]; then
              echo "⚠️ Health checks taking longer than expected"
              echo "📊 Current status:"
              echo "   App: $APP_STATUS"
              echo "   Caddy: $CADDY_STATUS"
              echo "📋 Container logs:"
              $COMPOSE_CMD logs --tail=30 app || true
              $COMPOSE_CMD logs --tail=30 caddy || true
              break
            fi
            echo "   Attempt $i/15 - app: $(echo $APP_STATUS | cut -d' ' -f1), caddy: $(echo $CADDY_STATUS | cut -d' ' -f1)"
            sleep 6
          done
          
          # Test the deployment
          echo "🔍 Testing deployment..."
          sleep 10
          
          if curl -f -s https://api.climateriskplan.com/health/ready >/dev/null 2>&1; then
            echo "✅ HTTPS deployment successful!"
            echo "🌐 API available at: https://api.climateriskplan.com"
          elif curl -f -s http://api.climateriskplan.com/health/ready >/dev/null 2>&1; then
            echo "⚠️ HTTP working, HTTPS may need more time for certificates"
            echo "🌐 API available at: http://api.climateriskplan.com"
            echo "💡 Check https://api.climateriskplan.com in a few minutes"
          else
            echo "❌ Deployment test failed"
            echo "📋 Checking logs..."
            $COMPOSE_CMD logs --tail=30 caddy
          fi
          
          echo "📊 Final status:"
          $COMPOSE_CMD ps
