name: Deploy to Dev Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: tar -czf ../app.tar.gz --exclude='.git' --exclude='__pycache__' . && mv ../app.tar.gz .
    - uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        source: app.tar.gz
        target: /tmp/
    - uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        script: |
          set -e
          
          echo "🚀 Starting Docker deployment..."
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "📦 Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "📦 Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Install network debugging tools
          echo "📦 Installing network tools..."
          apt-get update -qq && apt-get install -y -qq net-tools lsof psmisc curl >/dev/null 2>&1 || true
          
          # Determine which compose command to use
          if docker compose version &> /dev/null; then
            echo "Using docker compose (v2)"
            COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            echo "Using docker-compose (v1)"
            COMPOSE_CMD="docker-compose"
          else
            echo "❌ No Docker Compose found!"
            exit 1
          fi
          
          # Setup application directory
          echo "📁 Setting up application..."
          mkdir -p /opt/photogrammetry/data
          mkdir -p /opt/photogrammetry/logs
          cd /opt/photogrammetry
          tar -xzf /tmp/app.tar.gz
          
          # Use dev-specific compose file for port 8080
          cd deployment
          
          # Check for existing services on port 80
          echo "🔍 Checking for services using port 80..."
          if netstat -tuln 2>/dev/null | grep -q ':80 ' || ss -tuln 2>/dev/null | grep -q ':80 '; then
            echo "⚠️ Port 80 is in use. Checking for existing containers..."
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(80|caddy|nginx)" || true
          fi
          
          # Stop existing containers more thoroughly
          echo "🛑 Stopping existing containers..."
          $COMPOSE_CMD -f docker-compose.dev.yml down --remove-orphans 2>/dev/null || true
          $COMPOSE_CMD down --remove-orphans 2>/dev/null || true
          
          # Kill any containers that might be using port 80
          echo "🧹 Cleaning up containers using port 80..."
          docker ps -q --filter "expose=80" | xargs -r docker stop 2>/dev/null || true
          docker ps -aq --filter "expose=80" | xargs -r docker rm 2>/dev/null || true
          
          # Additional cleanup for orphaned containers
          docker container prune -f 2>/dev/null || true
          
          # Clean up old containers and images to save space
          docker system prune -f 2>/dev/null || true
          
          # Build and start containers
          echo "🔨 Building and starting containers..."
          
          # Try to start with dev configuration (port 8080) first
          echo "🔄 Starting with dev configuration (port 8080)..."
          if $COMPOSE_CMD -f docker-compose.dev.yml up -d --build; then
            echo "✅ Successfully started with dev configuration on port 8080"
            DEPLOYMENT_PORT=8080
          else
            echo "⚠️ Dev configuration failed, trying to free port 80..."
            # Final check that port 80 is free
            if netstat -tuln 2>/dev/null | grep -q ':80 ' || ss -tuln 2>/dev/null | grep -q ':80 '; then
              echo "❌ Port 80 is still in use after cleanup. Checking what's using it..."
              netstat -tuln 2>/dev/null | grep ':80 ' || ss -tuln 2>/dev/null | grep ':80 ' || true
              lsof -i :80 2>/dev/null || true
              echo "Attempting to kill processes using port 80..."
              fuser -k 80/tcp 2>/dev/null || true
              sleep 2
            fi
            
            echo "🔄 Trying with IP configuration (port 80)..."
            $COMPOSE_CMD -f docker-compose.ip.yml up -d --build
            DEPLOYMENT_PORT=80
          fi
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 15
          
          # Check container status
          echo "📊 Container status:"
          $COMPOSE_CMD ps
          
          # Wait for health checks with better error handling
          echo "🔍 Waiting for health checks..."
          for i in {1..30}; do
            if $COMPOSE_CMD ps | grep -E "(healthy|running)" | wc -l | grep -q "2"; then
              echo "✅ Services are running"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Health check timeout after 30 attempts"
              echo "📋 Container logs:"
              $COMPOSE_CMD logs app || true
              $COMPOSE_CMD logs caddy || true
              
              # Try one more time with a clean restart
              echo "🔄 Attempting clean restart..."
              $COMPOSE_CMD down --remove-orphans || true
              sleep 5
              $COMPOSE_CMD up -d --build || exit 1
              
              # Wait again for restart
              for j in {1..15}; do
                if $COMPOSE_CMD ps | grep -E "(healthy|running)" | wc -l | grep -q "2"; then
                  echo "✅ Services are running after restart"
                  break
                fi
                if [ $j -eq 15 ]; then
                  echo "❌ Final health check timeout"
                  exit 1
                fi
                echo "   Restart attempt $j/15 - waiting for services..."
                sleep 2
              done
              break
            fi
            echo "   Attempt $i/30 - waiting for services..."
            sleep 2
          done
          
          # Test the deployment
          echo "🔍 Testing deployment..."
          DEPLOYMENT_PORT=${DEPLOYMENT_PORT:-8080}
          if curl -f http://localhost:${DEPLOYMENT_PORT}/health >/dev/null 2>&1; then
            echo "✅ Deployment successful!"
            echo "🌐 API available at: http://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip'):${DEPLOYMENT_PORT}"
            echo "📊 Final status:"
            $COMPOSE_CMD ps
          else
            echo "❌ Deployment failed - health check unsuccessful"
            echo "📋 Detailed logs:"
            $COMPOSE_CMD logs app
            $COMPOSE_CMD logs caddy
            exit 1
          fi
