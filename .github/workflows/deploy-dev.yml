name: Deploy to Dev Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: tar -czf ../app.tar.gz --exclude='.git' --exclude='__pycache__' . && mv ../app.tar.gz .
    - uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        source: app.tar.gz
        target: /tmp/
    - uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        script: |
          set -e
          
          echo "🚀 Starting Docker deployment..."
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "📦 Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "📦 Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Determine which compose command to use
          if docker compose version &> /dev/null; then
            echo "Using docker compose (v2)"
            COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            echo "Using docker-compose (v1)"
            COMPOSE_CMD="docker-compose"
          else
            echo "❌ No Docker Compose found!"
            exit 1
          fi
          
          # Setup application directory
          echo "📁 Setting up application..."
          mkdir -p /opt/photogrammetry/data
          mkdir -p /opt/photogrammetry/logs
          cd /opt/photogrammetry
          tar -xzf /tmp/app.tar.gz
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          $COMPOSE_CMD down 2>/dev/null || true
          
          # Clean up old containers and images to save space
          docker system prune -f 2>/dev/null || true
          
          # Build and start containers
          echo "🔨 Building and starting containers..."
          $COMPOSE_CMD up -d --build
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 15
          
          # Check container status
          echo "📊 Container status:"
          $COMPOSE_CMD ps
          
          # Wait for health checks with better error handling
          echo "🔍 Waiting for health checks..."
          for i in {1..30}; do
            if $COMPOSE_CMD ps | grep -E "(healthy|running)" | wc -l | grep -q "2"; then
              echo "✅ Services are running"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Health check timeout after 30 attempts"
              echo "📋 Container logs:"
              $COMPOSE_CMD logs
              exit 1
            fi
            echo "   Attempt $i/30 - waiting for services..."
            sleep 2
          done
          
          # Test the deployment
          echo "🔍 Testing deployment..."
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ Deployment successful!"
            echo "🌐 API available at: http://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip'):8080"
            echo "📊 Final status:"
            $COMPOSE_CMD ps
          else
            echo "❌ Deployment failed - health check unsuccessful"
            echo "📋 Detailed logs:"
            $COMPOSE_CMD logs app
            $COMPOSE_CMD logs nginx
            exit 1
          fi
