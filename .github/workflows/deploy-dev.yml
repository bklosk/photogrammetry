name: Deploy to Dev Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: tar -czf ../app.tar.gz --exclude='.git' --exclude='__pycache__' . && mv ../app.tar.gz .
    - uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        source: app.tar.gz
        target: /tmp/
    - uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        script: |
          set -e
          
          echo "üöÄ Starting Docker deployment..."
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "üì¶ Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "üì¶ Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Install network debugging tools
          echo "üì¶ Installing network tools..."
          apt-get update -qq && apt-get install -y -qq net-tools lsof psmisc curl >/dev/null 2>&1 || true
          
          # Determine which compose command to use
          if docker compose version &> /dev/null; then
            echo "Using docker compose (v2)"
            COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            echo "Using docker-compose (v1)"
            COMPOSE_CMD="docker-compose"
          else
            echo "‚ùå No Docker Compose found!"
            exit 1
          fi
          
          # Setup application directory
          echo "üìÅ Setting up application..."
          mkdir -p /opt/photogrammetry/data
          mkdir -p /opt/photogrammetry/logs
          cd /opt/photogrammetry
          tar -xzf /tmp/app.tar.gz
          
          # Use dev-specific compose file for port 8080
          cd deployment
          
          # Check for existing services on port 80
          echo "üîç Checking for services using port 80..."
          if netstat -tuln 2>/dev/null | grep -q ':80 ' || ss -tuln 2>/dev/null | grep -q ':80 '; then
            echo "‚ö†Ô∏è Port 80 is in use. Checking for existing containers..."
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(80|caddy|nginx)" || true
          fi
          
          # Stop existing containers more thoroughly
          echo "üõë Stopping existing containers..."
          $COMPOSE_CMD -f docker-compose.dev.yml down --remove-orphans 2>/dev/null || true
          $COMPOSE_CMD -f docker-compose.ip.yml down --remove-orphans 2>/dev/null || true
          $COMPOSE_CMD -f docker-compose.prod.yml down --remove-orphans 2>/dev/null || true
          $COMPOSE_CMD down --remove-orphans 2>/dev/null || true
          
          # Kill any containers that might be using port 80
          echo "üßπ Cleaning up containers using port 80..."
          docker ps -q --filter "expose=80" | xargs -r docker stop 2>/dev/null || true
          docker ps -aq --filter "expose=80" | xargs -r docker rm 2>/dev/null || true
          
          # Remove specific containers by name if they exist
          echo "üßπ Removing existing containers by name..."
          docker stop resilience-api photogrammetry-caddy 2>/dev/null || true
          docker rm resilience-api photogrammetry-caddy 2>/dev/null || true
          
          # Additional cleanup for orphaned containers
          docker container prune -f 2>/dev/null || true
          
          # Clean up old containers and images to save space
          docker system prune -f 2>/dev/null || true
          
          # Build and start containers
          echo "üî® Building and starting containers..."
          
          # Use IP configuration for standard HTTPS deployment (ports 80/443)
          echo "üîÑ Starting with production configuration (ports 80/443)..."
          if $COMPOSE_CMD -f docker-compose.ip.yml up -d --build; then
            echo "‚úÖ Successfully started with production configuration on standard ports"
            DEPLOYMENT_PORT=80
            DEPLOYMENT_SCHEME=https
            COMPOSE_FILE="docker-compose.ip.yml"
          else
            echo "‚ö†Ô∏è Production configuration failed, trying dev configuration..."
            echo "üîÑ Starting with dev configuration (port 8080)..."
            $COMPOSE_CMD -f docker-compose.dev.yml up -d --build
            DEPLOYMENT_PORT=8080
            DEPLOYMENT_SCHEME=http
            COMPOSE_FILE="docker-compose.dev.yml"
          fi
          
          # Wait for services to start
          echo "‚è≥ Waiting for services to start..."
          if [ "$DEPLOYMENT_SCHEME" = "https" ]; then
            echo "‚è≥ HTTPS deployment - waiting extra time for TLS initialization..."
            sleep 30
          else
            sleep 15
          fi
          
          # Check container status
          echo "üìä Container status:"
          $COMPOSE_CMD ps
          
          # Wait for health checks with better error handling
          echo "üîç Waiting for health checks..."
          for i in {1..30}; do
            if $COMPOSE_CMD -f $COMPOSE_FILE ps | grep -E "(healthy|running)" | wc -l | grep -q "2"; then
              echo "‚úÖ Services are running"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Health check timeout after 30 attempts"
              echo "üìã Container logs:"
              $COMPOSE_CMD -f $COMPOSE_FILE logs app || true
              $COMPOSE_CMD -f $COMPOSE_FILE logs caddy || true
              
              # Try one more time with a clean restart
              echo "üîÑ Attempting clean restart..."
              $COMPOSE_CMD -f $COMPOSE_FILE down --remove-orphans || true
              sleep 5
              $COMPOSE_CMD -f $COMPOSE_FILE up -d --build || exit 1
              
              # Wait again for restart
              for j in {1..15}; do
                if $COMPOSE_CMD -f $COMPOSE_FILE ps | grep -E "(healthy|running)" | wc -l | grep -q "2"; then
                  echo "‚úÖ Services are running after restart"
                  break
                fi
                if [ $j -eq 15 ]; then
                  echo "‚ùå Final health check timeout"
                  exit 1
                fi
                echo "   Restart attempt $j/15 - waiting for services..."
                sleep 2
              done
              break
            fi
            echo "   Attempt $i/30 - waiting for services..."
            sleep 2
          done
          
          # Test the deployment
          echo "üîç Testing deployment..."
          DEPLOYMENT_PORT=${DEPLOYMENT_PORT:-80}
          DEPLOYMENT_SCHEME=${DEPLOYMENT_SCHEME:-https}
          
          # Test the appropriate endpoint
          if [ "$DEPLOYMENT_SCHEME" = "https" ]; then
            # For HTTPS, test both HTTP redirect and HTTPS endpoint
            echo "Testing HTTP to HTTPS redirect..."
            if curl -L -f -k https://localhost/health >/dev/null 2>&1; then
              echo "‚úÖ HTTPS deployment successful!"
              echo "üåê API available at: https://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip')"
            else
              echo "‚ùå HTTPS test failed, trying HTTP fallback..."
              if curl -f http://localhost/health >/dev/null 2>&1; then
                echo "‚ö†Ô∏è HTTP deployment working (HTTPS may need time to initialize)"
                echo "üåê API available at: http://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip')"
              else
                echo "‚ùå Both HTTP and HTTPS tests failed"
                echo "üìã Detailed logs:"
                $COMPOSE_CMD -f $COMPOSE_FILE logs app
                $COMPOSE_CMD -f $COMPOSE_FILE logs caddy
                exit 1
              fi
            fi
          else
            # For HTTP dev deployment
            if curl -f http://localhost:${DEPLOYMENT_PORT}/health >/dev/null 2>&1; then
              echo "‚úÖ HTTP deployment successful!"
              echo "üåê API available at: http://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip'):${DEPLOYMENT_PORT}"
            else
              echo "‚ùå HTTP deployment failed"
              echo "üìã Detailed logs:"
              $COMPOSE_CMD -f $COMPOSE_FILE logs app
              $COMPOSE_CMD -f $COMPOSE_FILE logs caddy
              exit 1
            fi
          fi
          
          echo "üìä Final status:"
          $COMPOSE_CMD -f $COMPOSE_FILE ps
