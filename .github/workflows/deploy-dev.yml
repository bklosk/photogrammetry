name: Deploy to Dev Server
on: { push: { branches: [main] } }
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: tar -czf ../app.tar.gz --exclude='.git' --exclude='__pycache__' . && mv ../app.tar.gz .
    - uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        source: app.tar.gz
        target: /tmp/
    - uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        script: |
          set -e  # Exit on any error
          
          echo "üöÄ Starting deployment..."
          
          # Install nginx if not already installed
          if ! which nginx; then
            echo "üì¶ Installing nginx..."
            apt update && apt install -y nginx
          fi
          
          # Deploy application
          echo "üìÅ Setting up application directory..."
          mkdir -p /opt/photogrammetry
          cd /opt/photogrammetry
          tar -xzf /tmp/app.tar.gz
          
          # Stop existing application
          echo "üõë Stopping existing application..."
          killall -q uvicorn 2>/dev/null || true
          
          # Install Python dependencies
          echo "üìö Installing Python dependencies..."
          python3 -m pip install -r requirements.txt --user --disable-pip-version-check --upgrade-strategy only-if-needed || {
            echo "üì¶ Installing pip and dependencies..."
            apt update && apt install -y python3-pip
            python3 -m pip install -r requirements.txt --user
          }
          
          # Configure nginx reverse proxy
          echo "‚öôÔ∏è  Configuring nginx..."
          if [ ! -f deployment/nginx/http.conf ]; then
            echo "‚ùå nginx config file not found!"
            exit 1
          fi
          cp deployment/nginx/http.conf /etc/nginx/sites-available/photogrammetry
          
          # Test nginx configuration
          echo "üß™ Testing nginx configuration..."
          if ! nginx -t; then
            echo "‚ùå Nginx configuration test failed"
            cat /etc/nginx/sites-available/photogrammetry
            exit 1
          fi
          
          # Enable the site and remove default
          echo "üîó Enabling site..."
          ln -sf /etc/nginx/sites-available/photogrammetry /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Configure firewall if ufw is active
          if ufw status | grep -q "Status: active"; then
            echo "üî• Configuring firewall..."
            ufw allow 80/tcp
            ufw allow 443/tcp
          fi
          
          # Restart and enable nginx
          echo "üåê Starting nginx..."
          systemctl restart nginx
          systemctl enable nginx
          
          # Verify nginx is running
          if ! systemctl is-active nginx >/dev/null; then
            echo "‚ùå Failed to start nginx"
            systemctl status nginx
            journalctl -u nginx --no-pager -n 20
            exit 1
          fi
          
          # Start the application (bind to localhost only since nginx will proxy)
          echo "üêç Starting FastAPI application..."
          setsid python3 -m uvicorn app:app --host 127.0.0.1 --port 8000 </dev/null >/dev/null 2>&1 &
          APP_PID=$!
          
          # Wait and verify the app is running
          echo "‚è≥ Waiting for application to start..."
          sleep 5
          
          # Check if process is still running
          if ! kill -0 $APP_PID 2>/dev/null; then
            echo "‚ùå Application failed to start"
            exit 1
          fi
          
          # Test application health
          echo "üîç Testing application health..."
          for i in {1..10}; do
            if curl -f http://127.0.0.1:8000/health >/dev/null 2>&1; then
              echo "‚úÖ Application health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "‚ùå Application health check failed after 10 attempts"
              echo "üìã Application logs:"
              tail -20 /opt/photogrammetry/logs/point_cloud_processing.log 2>/dev/null || echo "No logs found"
              exit 1
            fi
            echo "   Attempt $i/10 failed, retrying..."
            sleep 2
          done
          
          # Test reverse proxy
          echo "üîç Testing reverse proxy..."
          if curl -f http://localhost/health >/dev/null 2>&1; then
            echo "‚úÖ Reverse proxy working"
          else
            echo "‚ùå Reverse proxy failed"
            echo "üìã Nginx error logs:"
            tail -10 /var/log/nginx/error.log 2>/dev/null || echo "No error logs"
            exit 1
          fi
          
          echo "üéâ Deployment completed successfully!"
          echo "üìä Service status:"
          echo "   - Application PID: $APP_PID"
          echo "   - Nginx: $(systemctl is-active nginx)"
          echo "   - Health check: http://$(curl -s ifconfig.me)/health"
