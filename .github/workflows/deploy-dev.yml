name: Deploy to Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: tar -czf ../app.tar.gz --exclude='.git' --exclude='__pycache__' . && mv ../app.tar.gz .
    - uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        source: app.tar.gz
        target: /tmp/
    - uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_DEV_SERVER_IP }}
        username: ${{ secrets.DO_DEV_SERVER_USER }}
        password: ${{ secrets.DO_DEV_SERVER_PASS }}
        script: |
          set -e
          
          echo "🚀 Starting Docker deployment..."
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "📦 Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "📦 Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Install network debugging tools
          echo "📦 Installing network tools..."
          apt-get update -qq && apt-get install -y -qq net-tools lsof psmisc curl >/dev/null 2>&1 || true
          
          # Determine which compose command to use
          if docker compose version &> /dev/null; then
            echo "Using docker compose (v2)"
            COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            echo "Using docker-compose (v1)"
            COMPOSE_CMD="docker-compose"
          else
            echo "❌ No Docker Compose found!"
            exit 1
          fi
          
          # Setup application directory
          echo "📁 Setting up application..."
          mkdir -p /opt/photogrammetry/data
          mkdir -p /opt/photogrammetry/logs
          cd /opt/photogrammetry
          tar -xzf /tmp/app.tar.gz
          
          # Use dev-specific compose file for port 8080
          cd deployment
          
          # Check for existing services on port 80
          echo "🔍 Checking for services using port 80..."
          if netstat -tuln 2>/dev/null | grep -q ':80 ' || ss -tuln 2>/dev/null | grep -q ':80 '; then
            echo "⚠️ Port 80 is in use. Checking for existing containers..."
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(80|caddy|nginx)" || true
          fi
          
          # Stop existing containers more thoroughly
          echo "🛑 Stopping existing containers..."
          $COMPOSE_CMD -f docker-compose.dev.yml down --remove-orphans 2>/dev/null || true
          $COMPOSE_CMD -f docker-compose.ip.yml down --remove-orphans 2>/dev/null || true
          $COMPOSE_CMD -f docker-compose.prod.yml down --remove-orphans 2>/dev/null || true
          $COMPOSE_CMD down --remove-orphans 2>/dev/null || true
          
          # Kill any containers that might be using port 80
          echo "🧹 Cleaning up containers using port 80..."
          docker ps -q --filter "expose=80" | xargs -r docker stop 2>/dev/null || true
          docker ps -aq --filter "expose=80" | xargs -r docker rm 2>/dev/null || true
          
          # Remove specific containers by name if they exist
          echo "🧹 Removing existing containers by name..."
          docker stop resilience-api photogrammetry-caddy 2>/dev/null || true
          docker rm resilience-api photogrammetry-caddy 2>/dev/null || true
          
          # Additional cleanup for orphaned containers
          docker container prune -f 2>/dev/null || true
          
          # Clean up old containers and images to save space
          docker system prune -f 2>/dev/null || true
          
          # Build and start containers
          echo "🔨 Building and starting containers..."
          
          # Check port availability first
          echo "🔍 Checking port availability..."
          if netstat -tuln 2>/dev/null | grep -q ':80 ' || ss -tuln 2>/dev/null | grep -q ':80 '; then
            echo "⚠️ Port 80 is in use. Will try to stop conflicting services."
            # Try to stop common web servers
            systemctl stop nginx 2>/dev/null || true
            systemctl stop apache2 2>/dev/null || true
            # Kill any processes using port 80
            fuser -k 80/tcp 2>/dev/null || true
            sleep 5
          fi
          
          if netstat -tuln 2>/dev/null | grep -q ':443 ' || ss -tuln 2>/dev/null | grep -q ':443 '; then
            echo "⚠️ Port 443 is in use. Will try to stop conflicting services."
            fuser -k 443/tcp 2>/dev/null || true
            sleep 5
          fi
          
          # Use IP configuration for standard HTTPS deployment (ports 80/443)
          echo "🔄 Starting with production configuration (ports 80/443)..."
          if $COMPOSE_CMD -f docker-compose.ip.yml up -d --build 2>&1 | tee /tmp/compose_output.log; then
            echo "✅ Successfully started with production configuration on standard ports"
            DEPLOYMENT_PORT=80
            DEPLOYMENT_SCHEME=https
            COMPOSE_FILE="docker-compose.ip.yml"
          else
            echo "❌ Production configuration failed. Error details:"
            cat /tmp/compose_output.log | tail -20
            echo "⚠️ Trying dev configuration..."
            echo "🔄 Starting with dev configuration (port 8080)..."
            if $COMPOSE_CMD -f docker-compose.dev.yml up -d --build; then
              echo "✅ Dev configuration started successfully"
              DEPLOYMENT_PORT=8080
              DEPLOYMENT_SCHEME=http
              COMPOSE_FILE="docker-compose.dev.yml"
            else
              echo "❌ Both configurations failed!"
              $COMPOSE_CMD -f docker-compose.dev.yml logs --tail=50 || true
              exit 1
            fi
          fi
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          if [ "$DEPLOYMENT_SCHEME" = "https" ]; then
            echo "⏳ HTTPS deployment - waiting extra time for TLS initialization..."
            sleep 30
          else
            sleep 15
          fi
          
          # Check container status
          echo "📊 Container status:"
          $COMPOSE_CMD ps
          
          # Wait for health checks with better error handling
          echo "🔍 Waiting for health checks..."
          for i in {1..20}; do
            # Check if both containers are healthy
            APP_STATUS=$($COMPOSE_CMD -f $COMPOSE_FILE ps app --format "{{.Status}}" 2>/dev/null || echo "")
            CADDY_STATUS=$($COMPOSE_CMD -f $COMPOSE_FILE ps caddy --format "{{.Status}}" 2>/dev/null || echo "")
            
            if echo "$APP_STATUS" | grep -q "healthy" && echo "$CADDY_STATUS" | grep -q "healthy"; then
              echo "✅ Both services are healthy"
              break
            fi
            
            if [ $i -eq 20 ]; then
              echo "❌ Health check timeout after 20 attempts"
              echo "📊 Current status:"
              echo "   App: $APP_STATUS"
              echo "   Caddy: $CADDY_STATUS"
              echo "📋 Container logs:"
              $COMPOSE_CMD -f $COMPOSE_FILE logs --tail=50 app || true
              $COMPOSE_CMD -f $COMPOSE_FILE logs --tail=50 caddy || true
              exit 1
            fi
            echo "   Attempt $i/20 - app: $APP_STATUS, caddy: $CADDY_STATUS"
            sleep 6
          done
          
          # Test the deployment
          echo "🔍 Testing deployment..."
          DEPLOYMENT_PORT=${DEPLOYMENT_PORT:-80}
          DEPLOYMENT_SCHEME=${DEPLOYMENT_SCHEME:-https}
          
          # Test the appropriate endpoint
          if [ "$DEPLOYMENT_SCHEME" = "https" ]; then
            # For HTTPS, test both HTTP redirect and HTTPS endpoint
            echo "Testing HTTPS endpoint..."
            # Wait a bit more for TLS to be ready
            sleep 10
            if curl -L -f -k --max-time 30 https://localhost/health >/dev/null 2>&1; then
              echo "✅ HTTPS deployment successful!"
              echo "🌐 API available at: https://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip')"
            elif curl -f --max-time 30 http://localhost/health >/dev/null 2>&1; then
              echo "⚠️ HTTP deployment working (HTTPS may need time to initialize)"
              echo "🌐 API available at: http://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip')"
            else
              echo "❌ Both HTTP and HTTPS tests failed, trying fallback endpoints..."
              # Try different health endpoints
              for endpoint in "/health/ready" "/ready" "/"; do
                echo "   Testing endpoint: $endpoint"
                if curl -f --max-time 15 "http://localhost$endpoint" >/dev/null 2>&1; then
                  echo "✅ HTTP deployment working on endpoint: $endpoint"
                  echo "🌐 API available at: http://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip')"
                  break
                fi
              done
            fi
          else
            # For HTTP dev deployment
            echo "Testing HTTP endpoint on port ${DEPLOYMENT_PORT}..."
            if curl -f --max-time 30 http://localhost:${DEPLOYMENT_PORT}/health >/dev/null 2>&1; then
              echo "✅ HTTP deployment successful!"
              echo "🌐 API available at: http://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip'):${DEPLOYMENT_PORT}"
            else
              echo "❌ HTTP deployment failed, trying fallback endpoints..."
              # Try different health endpoints
              for endpoint in "/health/ready" "/ready" "/"; do
                echo "   Testing endpoint: $endpoint"
                if curl -f --max-time 15 "http://localhost:${DEPLOYMENT_PORT}$endpoint" >/dev/null 2>&1; then
                  echo "✅ HTTP deployment working on endpoint: $endpoint"
                  echo "🌐 API available at: http://$(curl -s ifconfig.me 2>/dev/null || echo 'your-server-ip'):${DEPLOYMENT_PORT}"
                  break
                fi
              done
            fi
          fi
          
          echo "📊 Final status:"
          $COMPOSE_CMD -f $COMPOSE_FILE ps
